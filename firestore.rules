// Blocks Collection
{
  id: string,
  name: string,
  coachId: string,
  athleteId: string,
  startDate: timestamp,
  endDate: timestamp,
  status: "active" | "completed" | "draft",
  sessionsPerWeek: number,
  weeks: [
    {
      weekNumber: number,
      days: [
        {
          dayNumber: number,
          exercises: [
            {
              name: string,
              schemes: [
                {
                  description: string,  // e.g., "1x3 @RPE 6"
                  loggedWeight: number | null  // Only set when athlete logs weight
                }
              ],
              notes: string | null  // Coach's notes for the exercise
            }
          ]
        }
      ]
    }
  ]
}

// WorkoutLogs Collection
{
  id: string,
  athleteId: string,
  blockId: string,
  weekNumber: number,
  dayNumber: number,
  exerciseName: string,
  schemeIndex: number,
  weight: number,
  timestamp: timestamp,
  notes: string | null  // Athlete's notes for the set
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isCoach() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'coach';
    }
    
    function isAthleteCoach(athleteId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(athleteId)).data.coachId == request.auth.uid;
    }

    function isRequestUpdate() {
      let allowedFields = ['pendingRequests', 'sentRequests', 'coachRequests', 'athletes', 'coachId', 'status', 'activeBlocks', 'previousBlocks', 'workoutLogs'];
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(allowedFields);
    }

    // Users collection
    match /users/{userId} {
      // Allow reading user data for authentication
      allow read: if true;  // Allow reading user data for login
      allow create: if request.auth != null;
      allow update: if 
        request.auth.uid == userId || 
        isCoach() ||
        (isAuthenticated() && isRequestUpdate());
    }

    // Blocks collection
    match /blocks/{blockId} {
      // Allow reading individual blocks
      allow read: if isAuthenticated() && (
        resource.data.athleteId == request.auth.uid ||
        resource.data.coachId == request.auth.uid
      );

      // Allow listing/querying blocks - simplified version
      allow list: if isAuthenticated() && (
        // For coaches
        (isCoach() && request.auth.uid == request.query.filters.coachId) ||
        // For athletes
        request.auth.uid == request.query.filters.athleteId
      );

      allow create: if isCoach();
      allow update: if isAuthenticated() && (
        resource.data.coachId == request.auth.uid ||
        (resource.data.athleteId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['weeks', 'status', 'updatedAt']) &&
         (request.resource.data.status == "submitted" || 
          request.resource.data.status == resource.data.status))
      );
      allow delete: if isCoach() && resource.data.coachId == request.auth.uid;
    }

    // WorkoutLogs collection
    match /workoutLogs/{logId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.athleteId ||
        (isCoach() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.athletes.hasAny([resource.data.athleteId]))
      );
      allow create: if isAuthenticated() && 
        request.resource.data.athleteId == request.auth.uid &&
        request.resource.data.weight is number &&
        request.resource.data.timestamp == request.time;
      allow update: if false;
      allow delete: if false;
    }
  }
} 